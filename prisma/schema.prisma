generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firstName      String       @map("first_name")
  email          String       @unique
  passwordHash   String       @map("password_hash")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  userTelegramId String       @unique
  uuid           String       @id @default(uuid()) @db.Uuid
  userTelegram   UserTelegram @relation(fields: [userTelegramId], references: [telegramId])

  @@map("user")
}

model UserTelegram {
  telegramId    String         @id @unique @map("telegram_id")
  telegramName  String         @map("telegram_name")
  countBonuses  Int            @default(0) @map("count_bonuses")
  isBan         Boolean        @default(false) @map("is_ban")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  role          UserRole       @default(User)
  accounts      Account[]
  paymentOrders PaymentOrder[]
  user          User?
  userCities    UserCitySM[]

  @@map("user_telegram")
}

model Account {
  accountId                String                  @id @map("account_id")
  email                    String
  passImap                 String                  @map("pass_imap")
  passEmail                String                  @map("pass_email")
  cookie                   String
  accessToken              String                  @map("access_token")
  xUserId                  String                  @map("x_user_id")
  deviceId                 String                  @map("device_id")
  installationId           String                  @map("installation_id")
  googleId                 String?                 @map("google_id")
  pushToken                String?                 @map("push_token")
  expiresInAccess          DateTime                @map("expires_in_access")
  isAccessMp               Boolean                 @default(true) @map("is_access_mp")
  isAccessCookie           Boolean                 @default(true) @map("is_access_cookie")
  isOnlyAccessOrder        Boolean                 @default(false) @map("is_only_access_order")
  bonusCount               Int                     @map("bonus_count")
  isUpdateBonus            Boolean                 @default(false) @map("is_update_bonus")
  createdAt                DateTime                @default(now()) @map("created_at")
  updatedAt                DateTime                @updatedAt @map("updated_at")
  refreshToken             String                  @map("refresh_token")
  cityId                   String                  @default("1720920299") @map("city_id")
  ownerTelegramId          String                  @map("owner_telegram_id")
  proxyUuid                String?                 @map("proxy_uuid") @db.Uuid
  expiresInRefresh         DateTime                @map("expires_in_refresh")
  userGateToken            String?                 @map("user_gate_token")
  accessTokenCourse        String?                 @map("access_token_course")
  isValidAccessTokenCourse Boolean                 @default(true) @map("is_valid_access_token_course")
  refreshTokenCourse       String?                 @map("refresh_token_course")
  statusCourse             CourseStatus            @default(NONE) @map("status_course")
  citySM                   CitySM                  @relation(fields: [cityId], references: [cityId])
  ownerTelegram            UserTelegram            @relation(fields: [ownerTelegramId], references: [telegramId])
  proxy                    Proxy?                  @relation(fields: [proxyUuid], references: [uuid])
  AccountCourse            AccountCourse[]
  AccountLessonProgress    AccountLessonProgress[]
  orders                   Order[]
  courses                  OriginalCourse[]

  @@map("account")
}

model CitySM {
  name      String       @default("Москва")
  cityId    String       @id @unique @default("1720920299") @map("city_id")
  fullName  String       @default("Москва") @map("full_name")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  accounts  Account[]
  cityUsers UserCitySM[]

  @@map("city_sm")
}

model UserCitySM {
  cityId         String       @map("city_id")
  userTelegramId String       @map("user_telegram_id")
  city           CitySM       @relation(fields: [cityId], references: [cityId])
  userTelegram   UserTelegram @relation(fields: [userTelegramId], references: [telegramId])

  @@id([cityId, userTelegramId])
  @@map("user_city_sm")
}

model Order {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique @map("order_number")
  accountId   String   @map("account_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  account     Account  @relation(fields: [accountId], references: [accountId])

  @@map("order")
}

model Proxy {
  uuid      String    @id @default(uuid()) @db.Uuid
  proxy     String
  expiresAt DateTime  @map("expires_at")
  blockedAt DateTime? @map("blocked_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  accounts  Account[]

  @@map("proxy")
}

model Todo {
  id        Int      @id @default(autoincrement())
  todo      String   @unique
  name      String
  active    Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("todo")
}

model Course {
  id        Int      @id
  name      String   @unique
  count     Int
  active    Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course")
}

model PaymentOrder {
  id             String                      @id @default(uuid()) @db.Uuid
  amount         Int
  status         StatusPayment               @default(Created) @map("status")
  receiptUrl     String?                     @map("receipt_url")
  completedAt    DateTime?                   @map("completed_at")
  userTelegramId String                      @map("user_telegram_id")
  createdAt      DateTime                    @default(now()) @map("created_at")
  updatedAt      DateTime                    @updatedAt @map("updated_at")
  isPositive     Boolean?                    @map("is_positive")
  amountCredited Int                         @map("amount_credited")
  transactionId  Int?                        @unique @map("transaction_id")
  userTelegram   UserTelegram                @relation(fields: [userTelegramId], references: [telegramId])
  statusHistory  PaymentOrderStatusHistory[]

  @@index([userTelegramId])
  @@index([status])
  @@map("payment_order")
}

model PaymentOrderStatusHistory {
  id             Int           @id @default(autoincrement())
  paymentOrderId String        @map("payment_order_id") @db.Uuid
  status         StatusPayment @map("status")
  changedAt      DateTime      @default(now()) @map("changed_at")
  paymentOrder   PaymentOrder  @relation(fields: [paymentOrderId], references: [id])

  @@index([paymentOrderId])
  @@map("payment_order_status_history")
}

model OriginalCourse {
  courseId         String          @id @map("course_id")
  title            String
  mnemocode        String
  points           Int
  lessons          Lesson[]
  AccountCourse    AccountCourse[]
  Account          Account?        @relation(fields: [accountAccountId], references: [accountId])
  accountAccountId String?

  @@map("original_course")
}

model Lesson {
  lessonId              String                  @id @map("lesson_id")
  title                 String
  duration              Int
  position              Int
  videoId               String                  @map("video_id")
  courseId              String                  @map("course_id")
  course                OriginalCourse          @relation(fields: [courseId], references: [courseId])
  AccountLessonProgress AccountLessonProgress[]

  @@unique([courseId, position])
  @@map("lesson")
}

model AccountCourse {
  accountCourseId Int                     @id @default(autoincrement()) @map("account_course_id")
  accountId       String                  @map("account_id")
  courseId        String                  @map("course_id")
  status          CourseStatus            @default(BLOCKED)
  account         Account                 @relation(fields: [accountId], references: [accountId])
  course          OriginalCourse          @relation(fields: [courseId], references: [courseId])
  lessonsProgress AccountLessonProgress[]

  @@unique([accountId, courseId])
  @@map("account_course")
}

model AccountLessonProgress {
  progressId                   Int            @id @default(autoincrement()) @map("progress_id")
  accountId                    String         @map("account_id")
  lessonId                     String         @map("lesson_id")
  status                       LessonStatus   @default(BLOCKED)
  nextViewAt                   DateTime?
  accountCourseAccountCourseId Int?
  AccountCourse                AccountCourse? @relation(fields: [accountCourseAccountCourseId], references: [accountCourseId])
  account                      Account        @relation(fields: [accountId], references: [accountId])
  lesson                       Lesson         @relation(fields: [lessonId], references: [lessonId])

  @@unique([accountId, lessonId])
  @@map("account_lesson_progress")
}

enum UserRole {
  User
  Admin
  Seller
}

enum StatusPayment {
  Created
  Transfered
  Completed
  Cancelled
  Proceedings
}

enum CourseStatus {
  NONE
  ACTIVE
  FINISHED
  BLOCKED
}

enum LessonStatus {
  NONE
  VIEWED
  BLOCKED
}
