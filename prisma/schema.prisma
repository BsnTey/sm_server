generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firstName      String       @map("first_name")
  email          String       @unique
  passwordHash   String       @map("password_hash")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  userTelegramId String       @unique
  uuid           String       @id @default(uuid()) @db.Uuid
  userTelegram   UserTelegram @relation(fields: [userTelegramId], references: [telegramId])

  @@map("user")
}

model UserTelegram {
  telegramId      String            @id @unique @map("telegram_id")
  telegramName    String            @map("telegram_name")
  countBonuses    Int               @default(0) @map("count_bonuses")
  isBan           Boolean           @default(false) @map("is_ban")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  role            UserRole          @default(User)
  accounts        Account[]
  paymentOrders   PaymentOrder[]
  user            User?
  fortuneCoupons  FortuneCoupon[]
  userStatusPref  OrderStatus[]     @map("user_status_pref")
  userCities      UserCitySM[]
  UserTemplate    UserTemplate[]
  AccountPurchase AccountPurchase[]

  @@map("user_telegram")
}

model UserTemplate {
  id             String       @id @default(uuid()) @db.Uuid
  name           String
  template       String       @db.Text
  userTelegramId String       @map("user_telegram_id")
  commissionType String       @default("TOTAL") @map("commission_type")
  commissionRate Float        @default(10) @map("commission_rate")
  roundTo        Int          @default(10) @map("round_to")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  userTelegram   UserTelegram @relation(fields: [userTelegramId], references: [telegramId])

  @@map("user_template")
}

model Account {
  accountId                String                  @id @map("account_id")
  email                    String
  passImap                 String                  @map("pass_imap")
  passEmail                String                  @map("pass_email")
  cookie                   String
  accessToken              String                  @map("access_token")
  xUserId                  String                  @map("x_user_id")
  deviceId                 String                  @map("device_id")
  installationId           String                  @map("installation_id")
  googleId                 String?                 @map("google_id")
  pushToken                String?                 @map("push_token")
  expiresInAccess          DateTime                @map("expires_in_access")
  isAccessMp               Boolean                 @default(true) @map("is_access_mp")
  isAccessCookie           Boolean                 @default(true) @map("is_access_cookie")
  isOnlyAccessOrder        Boolean                 @default(false) @map("is_only_access_order")
  bonusCount               Int                     @map("bonus_count")
  isUpdateBonus            Boolean                 @default(false) @map("is_update_bonus")
  createdAt                DateTime                @default(now()) @map("created_at")
  updatedAt                DateTime                @updatedAt @map("updated_at")
  refreshToken             String                  @map("refresh_token")
  cityId                   String                  @default("1720920299") @map("city_id")
  ownerTelegramId          String                  @map("owner_telegram_id")
  proxyUuid                String?                 @map("proxy_uuid") @db.Uuid
  expiresInRefresh         DateTime                @map("expires_in_refresh")
  userGateToken            String?                 @map("user_gate_token")
  accessTokenCourse        String?                 @map("access_token_course")
  isValidAccessTokenCourse Boolean                 @default(true) @map("is_valid_access_token_course")
  refreshTokenCourse       String?                 @map("refresh_token_course")
  statusCourse             CourseStatus            @default(NONE) @map("status_course")
  citySM                   CitySM                  @relation(fields: [cityId], references: [cityId])
  ownerTelegram            UserTelegram            @relation(fields: [ownerTelegramId], references: [telegramId])
  proxy                    Proxy?                  @relation(fields: [proxyUuid], references: [uuid])
  AccountCourse            AccountCourse[]
  AccountLessonProgress    AccountLessonProgress[]
  orders                   Order[]
  courses                  OriginalCourse[]
  deviceInfo               DeviceInfo?
  AccountPurchase          AccountPurchase[]

  @@map("account")
}

model DeviceInfo {
  id               String   @id @default(uuid()) @db.Uuid
  osVersion        String   @map("os_version")
  buildVersion     String   @map("build_version")
  brand            String
  model            String
  screenResolution String   @map("screen_resolution")
  browserVersion   String   @map("browser_version")
  IP               String
  accountId        String   @unique @map("account_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  account          Account  @relation(fields: [accountId], references: [accountId])

  @@map("device_info")
}

model CitySM {
  name      String       @default("Москва")
  cityId    String       @id @unique @default("1720920299") @map("city_id")
  fullName  String       @default("Москва") @map("full_name")
  xLocation String       @default("H4sIAAAAAAAAAL2Vz2rbQBDGX0XsKSEmaGX99a0oKhG1JaPKgbYUoSZqENgWyErABEOchF5a8KWnkkNy6a1g3IS6Tu1nmH2jjmzStKnWLqXNRbuaHfT9mPl2dET2o6SexO2MVI5IM8RFUTY1RdGpUSLNpE0qZW1TpZoqy71Snvw4au9GHVJ5cfTjzd4jFUKprEplUTIMcpfnhK0Iz+AjXMOUnbBjGMINe4f7t/BVYGcYvoLre2GYwYQds1P4vPhSNexGaY53u1/oibp4pzaPm8lerua4TmC6tZq7ZfvPgueuY5Fer/Q7rqwqHNxzmLE+TGAEw+UIklSMUHtkeq6J8kXKoiHL2mplYY312QkW4wbG7A0M1zE9i9I0zpK0u/iSJonGfYIiSk6hfMvzbN/1iigV3TAMDuRFDomYYzYoYJIVXUFFSpdDiRwo0204fiES1cqKrD5g4SiP8em2Xa9Zjs81l2hoP7uTS4qb3P0jBO3DFIZsIMAXJJ/Ojfd33ZZ50Ja3Y5vWkgtBdcplvoQPG6Kw1vDNjfL6CrtRjt3s2jJ1RV11KWYwmq9YpoAGcB4g1SW8D34pKT6m7HQ+a8YCfMvT4WoFcLkYeMuq2juWx58hOqXSH7V5gB3FQYdzrS9gDI0Jk//EVKaKLD3kdFE5fqvb5pNGPai79pKLoqNdeVP4Iu/wJ+wvmuPfFOtl/kvbDbM4aReP+tvTanQYNfHY9bctD+Nxx0zar+O0FaFglh5EJRIehnEzfBU346xrNg86WU5GWkknjfZJ7zvc83UVWAcAAA==") @map("x_location")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  accounts  Account[]
  cityUsers UserCitySM[]

  @@map("city_sm")
}

model UserCitySM {
  cityId         String       @map("city_id")
  userTelegramId String       @map("user_telegram_id")
  city           CitySM       @relation(fields: [cityId], references: [cityId])
  userTelegram   UserTelegram @relation(fields: [userTelegramId], references: [telegramId])

  @@id([cityId, userTelegramId])
  @@map("user_city_sm")
}

model Order {
  id          Int      @id @default(autoincrement())
  orderNumber String   @unique @map("order_number")
  accountId   String   @map("account_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  account     Account  @relation(fields: [accountId], references: [accountId])

  @@map("order")
}

model Proxy {
  uuid      String    @id @default(uuid()) @db.Uuid
  proxy     String
  expiresAt DateTime  @map("expires_at")
  blockedAt DateTime? @map("blocked_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  accounts  Account[]

  @@map("proxy")
}

model Todo {
  id        Int      @id @default(autoincrement())
  todo      String   @unique
  name      String
  active    Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("todo")
}

model Course {
  id        Int      @id
  name      String   @unique
  count     Int
  active    Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course")
}

model PaymentOrder {
  id             String                      @id @default(uuid()) @db.Uuid
  amount         Int
  status         StatusPayment               @default(Created) @map("status")
  receiptUrl     String?                     @map("receipt_url")
  completedAt    DateTime?                   @map("completed_at")
  userTelegramId String                      @map("user_telegram_id")
  createdAt      DateTime                    @default(now()) @map("created_at")
  updatedAt      DateTime                    @updatedAt @map("updated_at")
  isPositive     Boolean?                    @map("is_positive")
  amountCredited Int                         @map("amount_credited")
  transactionId  Int?                        @unique @map("transaction_id")
  couponId       String?                     @db.Uuid
  couponApplied  Boolean                     @default(false)
  userTelegram   UserTelegram                @relation(fields: [userTelegramId], references: [telegramId])
  statusHistory  PaymentOrderStatusHistory[]
  coupon         FortuneCoupon?              @relation(fields: [couponId], references: [id])

  @@index([userTelegramId])
  @@index([status])
  @@map("payment_order")
}

model PaymentOrderStatusHistory {
  id             Int           @id @default(autoincrement())
  paymentOrderId String        @map("payment_order_id") @db.Uuid
  status         StatusPayment @map("status")
  changedAt      DateTime      @default(now()) @map("changed_at")
  paymentOrder   PaymentOrder  @relation(fields: [paymentOrderId], references: [id])

  @@index([paymentOrderId])
  @@map("payment_order_status_history")
}

model OriginalCourse {
  courseId         String          @id @map("course_id")
  title            String
  mnemocode        String
  points           Int
  lessons          Lesson[]
  AccountCourse    AccountCourse[]
  Account          Account?        @relation(fields: [accountAccountId], references: [accountId])
  accountAccountId String?

  @@map("original_course")
}

model Lesson {
  lessonId              String                  @id @map("lesson_id")
  title                 String
  duration              Int
  position              Int
  videoId               String                  @map("video_id")
  courseId              String                  @map("course_id")
  course                OriginalCourse          @relation(fields: [courseId], references: [courseId])
  AccountLessonProgress AccountLessonProgress[]

  @@unique([courseId, position])
  @@map("lesson")
}

model AccountCourse {
  accountCourseId Int                     @id @default(autoincrement()) @map("account_course_id")
  accountId       String                  @map("account_id")
  courseId        String                  @map("course_id")
  status          CourseStatus            @default(BLOCKED)
  account         Account                 @relation(fields: [accountId], references: [accountId])
  course          OriginalCourse          @relation(fields: [courseId], references: [courseId])
  lessonsProgress AccountLessonProgress[]

  @@unique([accountId, courseId])
  @@map("account_course")
}

model AccountLessonProgress {
  progressId                   Int            @id @default(autoincrement()) @map("progress_id")
  accountId                    String         @map("account_id")
  lessonId                     String         @map("lesson_id")
  status                       LessonStatus   @default(BLOCKED)
  nextViewAt                   DateTime?
  accountCourseAccountCourseId Int?
  AccountCourse                AccountCourse? @relation(fields: [accountCourseAccountCourseId], references: [accountCourseId])
  account                      Account        @relation(fields: [accountId], references: [accountId])
  lesson                       Lesson         @relation(fields: [lessonId], references: [lessonId])

  @@unique([accountId, lessonId])
  @@map("account_lesson_progress")
}

model AccountMirror {
  id                String    @id @default(uuid()) @db.Uuid
  telegramId        String    @map("telegram_id")
  telegramName      String    @map("telegram_name")
  accountId         String?   @map("account_id")
  userIp            String?   @map("user_ip")
  mirrorToken       String?   @unique @map("mirror_token")
  mirrorTokenExpiry DateTime? @map("mirror_token_expiry")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  @@map("account_mirror")
}

model FortuneCoupon {
  id           String              @id @default(uuid()) @db.Uuid
  coupon       String              @unique
  type         FortuneSurpriseType
  value        Int
  isActive     Boolean             @default(true) @map("is_active")
  expiresAt    DateTime            @map("expires_at")
  usageCount   Int                 @default(0) @map("usage_count")
  maxUsage     Int                 @default(1) @map("max_usage")
  description  String?
  redeemedAt   DateTime?           @map("redeemed_at")
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @updatedAt @map("updated_at")
  owner        String
  userTelegram UserTelegram?       @relation(fields: [owner], references: [telegramId])
  payments     PaymentOrder[]

  @@map("fortune_surprise")
}

// model DiscountCategory {
//   /// Нормализованный код категории (например: MEN_SHOES, WOMEN_CLOTHING, SPORT_GEAR)
//   code String @id
//   name String
//
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   accountLinks AccountDiscount[]
// }
//
// model AccountDiscount {
//   accountId    String
//   categoryCode String
//
//   telegramId String
//
//   validTo DateTime
//
//   account  Account          @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
//   category DiscountCategory @relation(fields: [categoryCode], references: [code], onDelete: Cascade)
//
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   @@id([accountId, categoryCode])
//   @@index([telegramId, categoryCode])
//   @@index([accountId])
// }

model AccountPurchase {
  id          String @id
  orderNumber String @map("order_number")
  lineIndex   Int    @default(1) @map("line_index")

  accountId       String   @map("account_id")
  buyerTelegramId String   @map("buyer_telegram_id")
  amount          Int
  purchasedAt     DateTime @default(now()) @map("purchased_at")
  rawPayload      Json     @map("raw_payload")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  account Account      @relation(fields: [accountId], references: [accountId])
  buyer   UserTelegram @relation(fields: [buyerTelegramId], references: [telegramId])

  @@unique([orderNumber, lineIndex])
  @@index([accountId])
  @@index([orderNumber])
  @@map("account_purchase")
}

enum FortuneSurpriseType {
  Replenish
  Discount
  Payment
}

enum UserRole {
  User
  Admin
  Seller
}

enum StatusPayment {
  Created
  Transfered
  Completed
  Cancelled
  Proceedings
}

enum CourseStatus {
  NONE
  ACTIVE
  FINISHED
  BLOCKED
}

enum LessonStatus {
  NONE
  VIEWED
  BLOCKED
}

enum OrderStatus {
  accepted
  check_availability
  availability_confirmed
  completing
  ready_to_issue
  issued

  accepted_in_work
  ord_sent_to_cc
  ord_accepted_to_cc
  ord_sent_to_delivery_region
  arrived_to_region_and_awaiting_delivery
  transfered_for_delivery
  ord_full_delivered
  delivered
  at_pickup
  cancelled
}
